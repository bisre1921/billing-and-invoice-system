basePath: /api
definitions:
  controllers.SalesReportItem:
    properties:
      customer_name:
        type: string
      date:
        type: string
      invoice_id:
        type: string
      items:
        items:
          properties:
            category:
              type: string
            name:
              type: string
            quantity:
              type: integer
            subtotal:
              type: number
            unit_price:
              type: number
          type: object
        type: array
      status:
        type: string
      total_amount:
        type: number
    type: object
  controllers.SalesReportRequest:
    properties:
      categories:
        description: e.g. ["Electronics", ...]
        items:
          type: string
        type: array
      company_id:
        type: string
      custom_end:
        type: string
      custom_start:
        description: for custom range
        type: string
      date_range:
        description: e.g. today, last_7_days, last_month, last_3_months, custom
        type: string
      statuses:
        description: '["Paid", "Unpaid"]'
        items:
          type: string
        type: array
    required:
    - company_id
    - date_range
    type: object
  models.Company:
    properties:
      address:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      updated_at:
        type: string
    type: object
  models.Customer:
    properties:
      address:
        type: string
      company_id:
        type: string
      created_at:
        type: string
      current_credit_available:
        type: number
      email:
        type: string
      id:
        type: string
      max_credit_amount:
        type: number
      name:
        type: string
      phone:
        type: string
      tin:
        type: string
      updated_at:
        type: string
    type: object
  models.Employee:
    properties:
      address:
        type: string
      company_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      position:
        type: string
      updated_at:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.GenericResponse:
    properties:
      id: {}
      message:
        type: string
    type: object
  models.Invoice:
    properties:
      amount:
        type: number
      company_id:
        type: string
      created_at:
        type: string
      customer_id:
        type: string
      date:
        type: string
      due_date:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.InvoiceItem'
        type: array
      payment_date:
        type: string
      payment_type:
        type: string
      reference_number:
        type: string
      status:
        type: string
      terms:
        type: string
      updated_at:
        type: string
    required:
    - company_id
    - customer_id
    - payment_type
    - reference_number
    type: object
  models.InvoiceItem:
    properties:
      discount:
        type: number
      item_id:
        type: string
      item_name:
        type: string
      quantity:
        type: integer
      subtotal:
        type: number
      unit_price:
        type: number
    type: object
  models.Item:
    properties:
      category:
        type: string
      code:
        type: string
      company_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      selling_price:
        type: number
      unit:
        type: string
      updated_at:
        type: string
    type: object
  models.LoginCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.UpdatePaymentStatusRequest:
    properties:
      payment_date:
        type: string
    type: object
  models.UpdateUserInput:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      company_ids:
        items:
          type: string
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API documentation for the Billing and Invoice system.
  title: Billing and Invoice System API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates the user and returns a JWT token if credentials are
        valid
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginCredentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user and return JWT token
      tags:
      - Auth
  /auth/register/user:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: User with this email already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Registers a new user
      tags:
      - Auth
  /company/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single company by its ID if owned by the authenticated
        user
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Company retrieved successfully
          schema:
            $ref: '#/definitions/models.Company'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Company not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get company by ID
      tags:
      - Company
  /company/create:
    post:
      consumes:
      - application/json
      description: Registers a new company in the system
      parameters:
      - description: Company Data
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/models.Company'
      produces:
      - application/json
      responses:
        "201":
          description: Company created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Creates a new company
      tags:
      - Company
  /company/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Checks if a company exists with the given user ID as the owner
      parameters:
      - description: User ID to check for
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Company ID if found, or empty object if not
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check if a user has a company
      tags:
      - Company
  /customer/{id}:
    get:
      consumes:
      - application/json
      description: Business Owner or Employee fetches a specific customer's information
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a customer by ID
      tags:
      - Customer
  /customer/all:
    get:
      consumes:
      - application/json
      description: Business Owner views all customers for their company
      parameters:
      - description: Company ID
        in: query
        name: company_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Customer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all customers for a company
      tags:
      - Customer
  /customer/delete/{id}:
    delete:
      description: Business Owner or Employee deletes a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a customer by ID
      tags:
      - Customer
  /customer/register:
    post:
      consumes:
      - application/json
      description: Business Owner or Employee adds a new customer. CurrentCreditAvailable
        is initialized to MaxCreditAmount.
      parameters:
      - description: Customer Data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a new customer
      tags:
      - Customer
  /customer/update/{id}:
    put:
      consumes:
      - application/json
      description: Business Owner or Employee updates customer details. MaxCreditAmount
        cannot be reduced below the amount already used.
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Customer Info
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Invalid ID or credit amount less than used credit
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Customer not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a customer by ID
      tags:
      - Customer
  /employee/{id}:
    get:
      consumes:
      - application/json
      description: Business Owner views an employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an employee by ID
      tags:
      - Employee
  /employee/add:
    post:
      consumes:
      - application/json
      description: Business Owner adds a new employee
      parameters:
      - description: Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new employee
      tags:
      - Employee
  /employee/all:
    get:
      consumes:
      - application/json
      description: Business Owner views all employees for their company
      parameters:
      - description: Company ID
        in: query
        name: company_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Employee'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all employees for a company
      tags:
      - Employee
  /employee/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Business Owner deletes an employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an employee
      tags:
      - Employee
  /employee/update/{id}:
    put:
      consumes:
      - application/json
      description: Business Owner updates an employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an employee
      tags:
      - Employee
  /invoice/{id}:
    get:
      description: Retrieve a specific invoice by its unique identifier
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invoice retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid invoice ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Invoice not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get invoice by ID
      tags:
      - Invoices
  /invoice/companies/{company_id}:
    get:
      description: Retrieve all invoices associated with a given company ID.
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invoices retrieved successfully
          schema:
            items:
              items:
                $ref: '#/definitions/models.Invoice'
              type: array
            type: array
        "400":
          description: Invalid company ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: No invoices found for this company
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve invoices
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all invoices for a specific company
      tags:
      - Invoices
  /invoice/download/{id}:
    get:
      description: Download a specific invoice or receipt by ID based on its status.
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Invoice not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to generate or send PDF
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Download invoice or receipt as PDF
      tags:
      - Invoices
  /invoice/generate:
    post:
      consumes:
      - application/json
      description: Generate a new invoice for a customer with item list and auto-calculated
        total.
      parameters:
      - description: Invoice data
        in: body
        name: invoice
        required: true
        schema:
          $ref: '#/definitions/models.Invoice'
      produces:
      - application/json
      responses:
        "200":
          description: Invoice generated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid invoice input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to generate invoice
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Generate a new invoice
      tags:
      - Invoices
  /invoice/mark-as-paid/{id}:
    put:
      consumes:
      - application/json
      description: Update the status of a specific invoice to "Paid" and optionally
        set the payment date.
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Optional payment_date
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePaymentStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Invoice marked as paid successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid invoice ID or input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Invoice not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update invoice status
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Mark an invoice as paid
      tags:
      - Invoices
  /invoice/send/{id}:
    post:
      description: Sends either an invoice (if unpaid) or a receipt (if paid) to the
        customer via email.
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID or customer
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Invoice or customer not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to send email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send an invoice or receipt via email
      tags:
      - Invoices
  /item/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a single item by its ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item found
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Invalid item ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to fetch item
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an item by ID
      tags:
      - Item
  /item/add:
    post:
      consumes:
      - application/json
      description: Business Owner or Employee adds a new item
      parameters:
      - description: Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.Item'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a new item
      tags:
      - Item
  /item/all:
    get:
      consumes:
      - application/json
      description: Shows all items if they exist, or a message if none are found
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: View all items
      tags:
      - Item
  /item/company/company_id:
    get:
      consumes:
      - application/json
      description: Retrieves all items belonging to a specific company.
      parameters:
      - description: Company ID
        in: path
        name: company_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved items
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
        "400":
          description: Invalid company ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: No items found for the company
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to retrieve items
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all items for a specific company
      tags:
      - Item
  /item/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Business Owner or Employee deletes an item
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an existing item
      tags:
      - Item
  /item/import:
    post:
      consumes:
      - multipart/form-data
      description: Import multiple items from a CSV file
      parameters:
      - description: CSV file containing item data
        in: formData
        name: file
        required: true
        type: file
      - description: Company ID
        in: formData
        name: company_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Items imported successfully
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Invalid file format or data
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to import items
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Import items from CSV file
      tags:
      - Item
  /item/update/{id}:
    put:
      consumes:
      - application/json
      description: Business Owner or Employee updates item info
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing item
      tags:
      - Item
  /report/sales:
    post:
      consumes:
      - application/json
      description: Returns sales data for a company over a given period, with filters
        for status and item category.
      parameters:
      - description: Report filters
        in: body
        name: filters
        required: true
        schema:
          $ref: '#/definitions/controllers.SalesReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.SalesReportItem'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get sales report
      tags:
      - Reports
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - User
  /user/update/{id}:
    patch:
      consumes:
      - application/json
      description: Updates user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user details
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
